fn main() {
    // 구조체명을 통해 의미를 부여할 수 있으나 필드의 타입만 정의할 수 있고 명명은 할 수 없는, 튜플
    // 구조체라 불리는 튜플과 유사한 형태의 구조체도 정의할 수 있다.
    // 튜플 구조체는 일반적인 구조체 정의방법과 똑같이 struct 키워드를 통해 정의할 수 있고, 튜플의
    // 타입 정의가 키워드 뒤에서 이루어지면 된다. 아래는 사용 예시이다.
    
    struct Color(i32, i32, i32);
    struct Point(i32, i32, i32);

    let black = Color(0, 0, 0);
    let origin = Point(0, 0, 0);
    // 다른 튜플 구조체이기 때문에, black과 origin은 당연히 다른 타입이다.
    
    // 필드가 없는 유사 유닛 구조체:
    // 어떤 필드도 없는 구조체 역시 정의할 수 있다. 이는 유닛 타입인 ()과 비슷하게 동작하고, 그
    // 때문에 유사 유닛 구조체(unit-list structs)라고 불린다. 유사 유닛 구조체는 특정한 타입의
    // 트레잇(trait)을 구현해야하지만 타입 자체에 데이터를 저장하지 않는 경우에는 유용하다.
    // 이는 10장에서 더 자세하게 다룬다.
}
